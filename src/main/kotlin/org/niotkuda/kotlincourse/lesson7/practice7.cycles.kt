package org.niotkuda.kotlincourse.lesson7

// дз до
//                                     ЦИКЛЫ

// Циклы - фундаментальная концепция в программировании позволяющая
// повторять набор инструкций до тех пор, пока условие остается
// истинным
// Варианты создания цикла: оператор for
fun main() {

    //   for (item in collection){   // Оператор for принимает коллекцию и перебирает эл-ты этой коллекции назначая каждый элемент этой переменной
    // содержимое () должно состоять: из названия переменной, как правило - i, ключевое in, дальше коллекция (напр: список, диапазон, until, to)
    // тело цикла, в нём код, который будет исполняться столько раз сколько в коллекции элементов.
    // каждый элемент будет назначаться переменной i и эту переменную использовать в коде


//ex:

    for (i in 1..10) {
        println(i)  //выведет с 1 до 10
    }
    val e = 4
    for (i in 1..10) {
        println(i * 4)
    }

    for (i in listOf("smth", "smth2")) {
        println(i)
    }

    var t = ""
    for (i in listOf("smth", "smth2")) {
        t = i
    }
    println(t) // в консоль выведет smth2. Цикл провел итерацию содержимого списков и вывел последнее значение


    for (i in 10 downTo 1) {
        println(i)
    }


// Диапазон. Метод STEP указывает шаг диапазона
//указываем шаг 2 и в наш диапазон перескочит 2 значения

    for (i in 1..10 step 5) {
        println(i)
    }

    // until диапазон в котором крайнее значение не будет включено

    for (i in 1 until 10) { //исключая 10
        println(i)
    }


    val range = 1..10
    for (i in range) {
        println(i)
    }

//      WHILE тип цикла будет выполняться до тех пор, пока в коллекции выполняется условие
// while - проверяет условие. В () должно быть булево значение.
// И это сравнение должно обязательно меняться каждую итерацию
    // если условие не будет меняться каждую итерацию будет бесконечный цикл.
    // while используем только с пре/постдикриментом, инкриментом

//    while (true) {
//       println("+")
//   }  // этот цикл будет выполняться бесконечно


// while (false) {
//  println("+") }
    // цикл не выполнится никогда


    // чаще всего while используют со счётчиками
    // обратный отсчёт


//    var counter = 10
//   while (counter-- > 0) {  //пока уменьшающийся counter будет больше 0, код будет исполняться
//       println(counter) }    //01:18:06 сначала выполняется сравнение, а потом выполнится декримент, уменьшит вычисление на 1

    // в консоли от 9 до 0 выведет


// Цикл DO WHILE.
// цикл основан на проверке того что в ()
// Сначала выполняется тело цикла, потом проверка в (), если проверка прошла то выполняется тело цикла
// если не прошла, то выходит. Цикл выполнится хотя бы 1 раз.

//          do {
//    //тело цикла
//           } while (condition)

//  do {
//   println("+")
//   } while (false)                                     //сначала делает, потом думает


//   while (false) {
//    //тело цикла
//     }                                                  //сначала думает, потом делает

    // Операторы BREAK и CONTINUE

//for (i in 1..10) {
//    if (i == 2) continue    // оператор continue возобновляет цикл со следующей итерации, т.е на 2 останавливает и переходит к след.
//    if (i == 7) break    // оператор break завершает цикл совсем
//
//}


// ПРАКТИКА
    // пишем функцию, которая печатает числа от 1 до 10

    for (i in 1..10) {
        println(i)
    }

    // Задача написать функцию, которая выводит на экран квадраты чисел от 1 до 5.

    for (i in 1..5) {
        println(i * i)
    }

    //  создаём цикл, который будет выводить числа от 10 до 1

    for (i in 10 downTo 1) {
        println(i)
    }


    //  цикл, который отображает убывающую последовательность чётных чисел от 20 до 2.
    //  Вывести только чётные

    for (i in 20 downTo 2) {
        if (i % 2 == 0) {
            println(i)
        }
    }

// написать цикл, который будет выводить каждое 3 число
    for (i in 1..30 step 3) {
        println(i)
    }

    //цикл, который суммирует от 1 до 10
    var count = 1
    var sum = 0
    while (count <= 10) {
        sum = sum + count++
    }
    println(sum)


// цикл, который считает кол-во циклов в числе,
// начиная от 100 и уменьшая его на 1 после каждой итерации.
// нужно создать цикл, который будет считать,
// выводить в консоль кол-во цифр в числе. Числа от 100 до 1.


    var counter1 = 100
    while (counter1 > 1){
      println(counter1--.toString().length)
    }





}