package org.niotkuda.kotlincourse.lesson11
fun main() {

// Pair пара

    // Pair пара вспомогательный универсальный класс, хранит 2 значения.
    //Используется в словарях при инициализации словаря
    // Состоит из двух полей. Неизменяемый.
    //используется когда нужно из функции вернуть 2 каких-то объекта,
    // а функция не позволяет возвращать 2 разных объекта
    // то можно использовать пэир
    //fun getD(): Pair<Double, Int>
    // Pair - объект, который хранит сразу 2 значения. Обеспечивает удобную работу с мапами.
// Мап использует пэир как вспомогательный, для того чтобы передавать эти пары, значения


    val pair: Pair<Int, String> = 1 to "a" // to  инфиксная функция. 1-ключ а-значение
    //через to создаётся объект типа pair, в котором первое значение имеет значение типа int 1, а второе строковое а

    val pair2 = Pair(2, "a")

    println(pair.first)
    println(pair.second)


    //СЛОВАРИ MAP


// тоже коллекции, их можно представить в виде списков.
// Словари состоят из пар значений ключ+значение
//Каждому ключу соответствует своё значение. Словари называются map

//Словари реализуются с помощью класса MAP
    //имеют 2 любых типа простые(String, Int) сложные(списки, множества)

// mapOf метод инициализации мапа
    //мапа хранит данные в виде ключа и значения

    val emptyMap: Map<String, String> = mapOf<String, String>()  //проинициализировали пустой массив

    val a1 = "Россия" to "Москва"

    val a2 = "Франция" to "Париж"

    val capitals = mapOf(a1, a2)


    val mutableCapitals =
        mutableMapOf(  // проинициализировали изменяемый мап с данными, кол-во аргументов не ограничено
            "Россия" to "Москва",
            "Франция" to "Париж"
        )

    val map: Map<Int, String> = mapOf(1 to "a", 2 to "b", 3 to "c")


    val capitalOfRussia =
        capitals["Россия"] // квадратными скобками мы передаём ключ и по этому ключу Россия получаем значение Москва
    println(capitalOfRussia)


    // Добавление нового элемента.
    // у словаря

    mutableCapitals["Германия"] = "Берлин" //  по ключу Берлин в словарь добавляем Германия
    mutableCapitals.remove("Франция") //remove удаляет и ключ и значение из словаря

    // перебор элементов в цикле


    for (entries in mutableCapitals) {

        println("${entries.key} : ${entries.value}")

    }



    for ((country, capital) in capitals) {

        println("$country: $capital")
    }

    // ключи могут быть null. null ключ может быть только один. Второе значение обязательно должно быть

    val mapWithNullableKey = mutableMapOf<String?, Int>(null to 1)




// ПРАКТИКА
// Создание пустого неизменяемого словаря, где ключами будут строки, а значениями целые числа

val newMap: Map<String, Int> = mapOf()

val newMap2 = mapOf<String, Int>()

// Создание неизменяемого словаря, где ключами являются целые числа, а значениями строки
// Инициализируем(заполняем) сразу этот словарь несколькими значениями

val newMap3 = mapOf<Int, String>(1 to "a" , 2 to "b")

// создаём переменную и проинициализируем её изменяемым словарем

val newMap4 = mutableMapOf(1 to "955")

newMap4[34]= "dfkf"   // добавляем значение в изменяемый словарь

println(newMap4[1])  // получаем значение из словаря и распечатываем
println(newMap3[568]) // если значения нет в словаре распечатает null





}
