//package org.niotkuda.kotlincourse.lesson23
//fun main () {
////Задача 1
////Напишите функцию analyzeDataType, принимающую параметр типа Any.
//
//    fun analyzeDataType(argument: Any) {
//
//// Функция должна определить тип аргумента и вывести соответствующее сообщение:
//        when (argument) {
//            is String -> println("Это строка: $argument")       //Для строки: "Это строка: [значение]".
//
//            is Int -> println("Это целое число: $argument") //Для целого числа: "Это целое число: [значение]".
//
//            is List<*> -> println("Это список, количество элементов: $argument")  //Для списка: "Это список, количество элементов: [количество]".
//
//            is Map<*, *> -> println("Это карта, количество пар: $argument.") //Для карты: "Это карта, количество пар: [количество]".
//            else -> println("Неизвестный тип данных")
//
//    }
//    }
//    //Используйте оператор is для проверки типов.
//
////Задача 2
////Создайте функцию safeCastToList,
//// принимающую параметр типа Any и возвращающую размер списка,
//// если аргумент можно безопасно привести к типу List.
//// В случае неудачного приведения функция должна возвращать -1.
////Используйте as? для безопасного приведения типа.
//
//    fun safeCastToList (argument2: Any) : Int {
//return if (argument2 as? List<*> != null)
//    }
//
////Задача 3
////Создайте функцию getStringLengthOrZero,
//// которая принимает параметр типа Any? и возвращает длину строки, если аргумент можно привести к типу String.
//
//// В случае, если аргумент равен null или не является строкой, функция должна возвращать 0.
//
//    fun getStringLengthOrZero(arg: Any?): Int {
//        return if (arg is String) {
//            arg.length
//        } else {
//            0
//        }
//    }
//
////Задача 4
////Создайте функцию, которая принимает параметр типа Any.
////Функция гарантированно ожидает число (в виде числа или строки,
//// например 4 или 4.2 или “4.2”) и должна вернуть квадрат этого числа.
//// Если придёт число, его нужно возвести в квадрат, если придёт строка,
//// то его нужно преобразовать в число через функцию toDouble() и возвести в квадрат.
//
//
////Задача 5
////Напишите функцию sumIntOrDoubleValues,
//// которая принимает список элементов типа Any и возвращает
//// сумму всех целочисленных (Int) и вещественных (Double) значений в списке.
//// Все остальные типы должны быть проигнорированы.
//
//    fun sumIntOrDoubleValues(list: List<Any>): Double {
//        var res = 0.0
//        for (i in list) {
//            when (i) {
//                is Int -> res += i
//                is Double -> res += i
//            }
//        }
//        return res
//    }
//
////Задача 6
////Создайте функцию tryCastToListAndPrint,
//// которая принимает параметр типа Any и пытается привести его к типу List<*>.
//// Если приведение успешно, функция должна напечатать все строки из списка,
//// если элемент не является строкой то вывести предупреждение об этом.
//// Если приведение неудачно, должно быть выведено сообщение об ошибке,
//// не прерывая выполнение программы.
////
//}