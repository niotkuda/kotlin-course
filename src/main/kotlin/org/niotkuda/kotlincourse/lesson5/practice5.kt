package org.niotkuda.kotlincourse.lesson5
//ОПЕРАТОРЫ
fun main() {
    val sum = 10 + 5 //  объявили переменную и присвоили ей выражение, результат вычисления присвоится в рантайм
    println(sum) //с помощью этой функции распечатываем в консоль значение

//можем складывать строки "". Конкатенация
    val sum1 = "5" + "3"
    println(sum) // в консоли 53

    val diff = 10 - 5
    println(diff)

        //умножение
    val product = 10 * 5

    //деление
val remainder1 = 10 / 5

//вычисление остатка от деления
    val remainder = 10 % 5

    //ОПЕРАТОРЫ СРАВНЕНИЯ.
// ОС позволяют сравнить 2 значения и получить булевы значения

    val isEqual1 = 5 == 5 //лев.операнд проверяется на эквивалентность правому. true

    val isEqual = 5 == 4 //false

    // Логическая НЕ !=

     val isNotEqual = (5 != 5) //f

  //  val is Greater = (5 > 3) //t

    //Логические операторы И &&(все операнды должны быть Т),
    // ИЛИ ||(любой из операндов мб Т чтобы вернулось Т),
    // НЕ !

val andResult = true && true //t

//&& t+t=t , f+f=f
  //  f+t=f

  //  ИЛИ ||

val orResult = true || false

// t || f=t

    // Оператор not ! . Переворачивает значение

val notResult = !(5 > 3)

    // Оператор присваивания =
   var number = 5 // переменной с именем number присваивается значение 5

    number += 3 // присваивание с увеличением (number = number + 3) *, /

    //Операторы инкримента и дикримента.

    number++ //увеличит текущее значение на 1

    number-- //уменьшит текущее значение на 1


    println(--number)  //  В println передаём переменную.
//  Если инкримент происходит --  ДО переменной значит сначала происходит уменьшение, а потом предоставление результата

// Приоритет логических операций 1. !не 2. И 3. ИЛИ

val example = ((8 + 1) >= 9) || (6 - 2 != 4) && (2 * 3 == 6)

// практика c 00:57 - 01:22:00

    // Оператор элвиса ?: .Нужен чтобы выполнить какое-то другое действие в случае если переменная к которой мы обращаемся в текущий момент является null

var name: String? = null // null заглушка. Позволяет обойти необходимость прерывания кода в случае невозможности создания объекта
        //? проверка на null

    val res = if (name == null) {   //без использования оператора элвиса
        "Unknown"
    } else {
        name
    } // если name = null, то вернуть Unknown

    val result = name ?: "Unknown" // присваиваем переменной result значение name, либо Unknown если name = null

    }
//val result = name если null то выполнить: throw IllegalArgumentException("Не может быть null")




fun getName(): String? {
    return null
}

// ЗАДАЧИ

// Вывести текущий уровень громкости аудио системы.
// Известно, что после перезагрузки пользовательский уровень громкости не назначен
//Дефолтный уровень громкости = 30%

// Exception класс для сообщения об ошибке

//создаём функцию, придумываем название, придумывать аргумент, значение определять
// функция, которая должна распечатать текущий уровень громкости

fun printVolume(userVolume: Int?) {
val defaultVolume = 30 //записываем в качестве переменной дефолтный уровень звука
    println(userVolume ?: defaultVolume) // само решение будет сводиться к тому что мы выводим переданное значение уровня громкости, но если оно = null, то выводим дефолтное значение
}
//в main printVolume(null)

// Задача
// Рассчитать стоимость товара со скидкой, если цена известна,
// а скидка указанная в %, может быть не установлена


//fun printPriceDiscount(price: Double, s:)  {



//01:48:00 ПАУЗА.













