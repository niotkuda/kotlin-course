package org.niotkuda.kotlincourse.lesson13

import org.niotkuda.kotlincourse.lesson4.numbers

fun main(){



val collection = listOf(22, 23, 24, 17)
    val strings = listOf("de", "bc", "cd", "cd")
    printAll(
        collection.size > 5,
        collection.isEmpty(),
        collection.isNotEmpty(),
        collection.getOrElse(2) { 5 },
        collection.joinToString (" " ),
        collection.sum(),
        collection.average(),
        collection.max(),
        collection.min(),
        collection.firstOrNull(),
        collection.contains(3),
        collection.filter { it in 18..30 },
        collection.filterNot { it % 2 == 0 && it % 3 == 0 },
        collection.filterNotNull(),
        collection.map { "$it".length }, //Преобразовать текстовую коллекцию в коллекцию длин слов
        collection.associate { it to it.reversed() },
        strings.sorted(),
        strings.sortedDescending(),

        strings.distinct(),
        collection.take(3),   //Взять первые 3 элемента списка
        collection.takeLast(3) //Взять последние 3 элемента списка
    )
collection.forEach { println(it * it) } //квадраты элементов списка




//Задание 2: Характеристика числовой коллекции
//Написать метод, который принимает коллекцию чисел и возвращает строку с текущим состоянием коллекции используя конструкцию when
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
//
//Вызвать метод с данными, подходящими под каждую из веток

fun numbCollection(numList: List<Int>): String {
    return when {
        numList.isEmpty() -> "Пусто"
        numList.size < 5 -> "Короткая"
        numList.getOrNull(0) == 0 -> "Стартовая"
        numList.sum() > 18080 -> "Массивная"
        numList.min() > 1080 -> "Положительная"
        numList.average() == 10.0 -> "Сбалансированная"
        numList.joinToString("").length == 28 -> "Клейкая"
        numList.max() <= -10 -> "Отрицательная"
        numList.contains(3) && numList.contains(14) -> "Пиздатая"
        else -> "Уникальная"

    }

}

//Задание 3: Анализ Учебных Оценок
//Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.


val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
println(
grades.filter { it >= 60})
.sorted
.take(3)
)

//Задание 4: Создание каталога по первой букве.
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
//)
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.

val list = listOf("Стол", "табурет", "ваза", "Кружка",
    "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка",
    "Картина", "столик", "Вазон", "шторы", "Пуф", "книга",
    "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка",
    "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло",
    "занавеска", "Бра", "пепельница", "Глобус", "статуэтка",
    "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка",
    "Настенные часы", "подсвечник", "Журнальный столик", "сувенир",
    "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
println(list.map { it.lowercase() }
.groupBy { it[0] }
)



//Задание 5: Подсчёт средней длины слов в списке.
//Начальные значения из задачи 3.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вывести форматированный текст с двумя знаками после запятой.


println("средней длины: %.2f".format(list.map { it.length }.average())

//Задание 6: Категоризация чисел.
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
//


val numbers = listOf1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    println(numbers.distinct()).sortedDescending())
    .groupBy { if (it % 2 == 0) "чётные" else "нечётные"} )


//    Задание 7: Поиск первого подходящего элемента
//    Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
//    Цель: Найти первый возраст в списке, который соответствует условию (больше 18), преобразовать его к строке, или вернуть сообщение "Подходящий возраст не найден".

val ages = listOf(22, 18, 30, 45, 17, null, 60)
    //println(ages.firstOrNull { it != null && it > 18 }?.toString() ?: "Подходящий возраст не найден")

println(ages.filterNotNull().firstOrNull{ it > 18 }?.toString() ?: "Подходящий возраст не найден")

}