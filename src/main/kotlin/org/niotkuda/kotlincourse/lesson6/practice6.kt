//package org.niotkuda.kotlincourse.lesson6
//
//import org.niotkuda.kotlincourse.lesson5.getName
//
////                                     УСЛОВНЫЕ ОПЕРАТОРЫ
//
////урок с 00:52:00
//
//// УО в котлин используются для выполнения определённых блоков кода.
//// В зависимости от условий эти операторы позволяют программе принимать решения,
//// выполнять различные действия в зависимости от разных сценариев
//// представляем как ветку. Код исполняется и в какой-то момент разветвляется и идёт по одной из веток
//// в месте, где ветка раздвоилась должен стоять оператор условия и проверять переданное в него условие true или false
//// если true, то выполняется основной блок кода, если false, то следующий блок
//
//fun main() {
//    //если логическое выражение в скобках тру - выполняется этот блок
//    if (условие) {
//        // код для выполнения если условие true
//    }
//
//    val number = getNumber()
//    if (number > 5) {
//        println("Число больше 5") //если содержимое больше 5(тру) выполняется этот блок кода
//    }
//
//    val number2 = 7
//    if (number2 > 5) {
//        println("Число больше 5") // если выражение не тру этот блок кода не выполнится
//    }
//    println("Число меньше или равно 5")
//
//
//    val number3 = 7
//    if (number3 > 5) {
//        println("Число больше 5")
//    } else {// else=иначе, если выражение не тру то будет следующий блок когда выполняется
//        println("Число меньше или равно 5")
//
//    }
//
//
//    val number4 = 6
//
//    if (условие1) {
//
//        // код для выполнения если условие1 true
//    } else if (условие2) {
//
//        // код для выполнения если условие2 true
//    } else {
//
//        // код для выполнения если оба false
//    }
//
//
//    val number5 = 6
//
//    if (number5 < 0) {
//
//        println("Число отрицательное")
//    } else if (number5 == 0) {
//
//        println("Число равно 0")
//
//    } else {
//        println("Число положительное")
//    }
//
//
//    // тип данных диапазон
//    val intRange: IntRange = 1..10 // диапазон целочисленных значений
//    val intRangeUntil = 1 until 10  // от 1 до 10 не включительно
//    val downTo = 10 downTo 1
//    var charRange: CharRange = 'd'..'r'
//
//
//    val inRange = 2 in intRange
//    // оператор in нужен, чтобы проверить, что значение входит в диапазон
//
//
//    val notInRange = 2 !in intRange //not in
//
//
//
//    when (значение) {  // если в1 тру, то выполняется этот код, если нет переходит к в2
//        выражение1 -> { /* код */
//        }
//
//        выражение2 -> { /* код */
//        }
//
//        else -> { /* код */
//        } // если никакие из выражениё не выполняются, то выполняется то, что в блоке else
//    }
//
//
//    val score = 95
//    when (score) {
//        in 90..100 -> println("Отлично")
//        in 80..89 -> println("Хорошо")
//        in 70..79 -> println("Удовлетворительно")
//        else -> println("Нужно подучить")
//    }
//
//
//// Если проверка одна используем if else. Если проверок много, то when.
//// НО если в блоках много кода то if else
//
//
//    // Ещё УО используются для вычисления значения для переменных
//    val a = 3
//    val b = 4
//    val max = if (a > b) a else b
//// УО if выполняет проверку если A больше b,
//// то вернётся значение A и будет присвоено переменной max
//
//    val max1 = if (a > b) {  //тоже самое иначе записано
//        a
//    } else {
//        b
//    }
//// выведется 4
//
//
//    val score1 = 95
//// //избавляемся от лишних println запоминая её содержимое в переменную,
//// а содержимое этой переменной в конце печатаем
//    val result = when (score1) {  // когда score1 удовлетворит одному из условий
//        // будет выполнен соответствующий блок кода
//        // и значение этого блока кода вернётся из этого блока когда и будет назначен этой переменной
//        in 90..100 -> "Отлично"
//        in 80..89 -> "Хорошо"
//        in 70..79 -> "Удовлетворительно"
//        else -> "Нужно подучить"
//    }
//    println(result)
//
//
//    // ЗАДАЧИ.
//
//    // Задача определения времени суток.
//// Напишите функцию, которая принимает текущий час от 0 до 23
//// и возвращает строку с описанием времени суток "Утро", "День", "Вечер", "Ночь"
//
//    fun getTimesOfDay(hour: Int): String {
//        return if (hour < 0 || hour > 23) {
//            "Неверное значение времени"
//        } else
//            return if (hour in 0..4) {
//                "Ночь"
//            } else if (hour in 5..11) {
//                "Утро"
//            } else if (hour in 12..16) {
//                "День"
//            } else {
//                "Вечер"
//            }
//    }
//
//   val strPass = 32489
//}
//
//    // Задача 2.
//
//    //Проверка пароля.
//// Задайте функцию, которая принимает строку в качестве пароля
//// и возвращает true если пароль сильный т.е содержит более 8 символов, и false в другом случае
//
//
//fun checkPassword (password: String): Boolean {
//    if (password.length <= 8) return false // если проверка по длине не пройдена,
//// то проверять дальнейшие параметры не нужно можно вернуть false
////    if (checkSymbols(password)) return true
////    return false
//return checkSymbols(password)
//
//}
//
//fun checkSymbols (password: String): Boolean {
//    return false                                        //функция заглушка
//}
//
//// Оценки в школе
//// Напишите функцию, которая принимает число бал от 0 до 100 и возвращает соответствующую оценку
//// где А высокий бал
//
//fun convertMark(mark: Int):String {
//
//    return when (mark) {
//        in 0..20 -> "F"
//        in 21..40 -> "E"
//        in 41..60 -> "D"
//        in 61..80 -> "C"
//        in 81..90 -> "B"
//        in 91..100 -> "A"
//        else -> "Invalid mark"
//    }
////    return result
//}
